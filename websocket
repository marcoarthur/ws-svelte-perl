#!/usr/bin/env perl
use Mojolicious::Lite;
use Mojo::JSON qw(encode_json);
use constant {
    MAX_VALUE => 10,
    TIME      => 1,
};

BEGIN {
    plugin 'Mojolicious::Plugin::EventSource', timeout => 300
}

helper task => sub {
    my $total = shift || MAX_VALUE;
    my $counter = 0;

    return sub {
        return $counter > MAX_VALUE ? undef : { total => $counter++ };
    };
};

get '/' => sub {
    my $c = shift;
    $c->reply->static('index.html');
};

#
# Partially from Mojolicious::Guides::Tutorial
# and Mojolicious::Guides::Cookbook
# and Mojolicious::Guides::Rendering
#
websocket '/ws' => sub {
    my $c = shift;
    my $id;
    my $task = $c->task;

    $c->on(
        json => sub {
            my ( $c, $hash ) = @_;
            $c->log->debug(" Received a msg ");

            $id = Mojo::IOLoop->recurring(
                TIME() => sub {
                    $c->log->debug(" Sending a msg ");

                    if ( my $data = $task->() ) {
                        $c->send( { json => $data } );
                    } else {
                        Mojo::IOLoop->remove($id);
                        undef $id;
                    }
                }
            );
        }
    );

    $c->on(
        finish => sub {
            my ( $c, $code, $reason ) = @_;
            Mojo::IOLoop->remove($id) if $id;
            $c->app->log->debug("WebSocket closed with status $code");
        }
    );
};

event_source '/event' => sub {
    my $c    = shift;
    my $task = $c->task;
    $c->render_later;
    $c->log->debug(" Received a subscriber ");

    my $id = Mojo::IOLoop->recurring(
        TIME() + 1 => sub {
            if ( my $data = $task->() ) { 
                $c->log->debug('sending tick');
                $c->emit( "tick", encode_json( $data ) );
            }
        }
    );

    $c->on( finish => sub { Mojo::IOLoop->remove($id) if $id } );

};

app->start;
