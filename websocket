#!/usr/bin/env perl
use Mojolicious::Lite;
use Mojo::JSON qw(encode_json);
use constant {
    MAX_VALUE => 10,
    TIME      => 1,
};

plugin 'CORS';
plugin Webpack => {
    process      => [qw(svelte css js)],
    dependencies => {
      core => 'rollup',
      svelte => [qw(rollup-plugin-svelte svelte)]
    },
};

helper create_task => sub {
    my $total   = shift || MAX_VALUE;
    my $counter = 0;

    return sub {
        return $counter > MAX_VALUE ? undef : { total => $counter++ };
    };
};

#
# Partially from Mojolicious::Guides::Tutorial
# and Mojolicious::Guides::Cookbook
# and Mojolicious::Guides::Rendering
#
websocket '/ws' => sub {
    my $c = shift;
    my $id;
    my $task = $c->create_task;

    $c->on(
        json => sub {
            my ( $c, $hash ) = @_;
            $c->log->debug(" Received a msg ");

            $id = Mojo::IOLoop->recurring(
                TIME() => sub {
                    $c->log->debug(" Sending a msg ");

                    if ( my $data = $task->() ) {
                        $c->send( { json => $data } );
                    } else {
                        Mojo::IOLoop->remove($id);
                        undef $id;
                    }
                }
            );
        }
    );

    $c->on(
        finish => sub {
            my ( $c, $code, $reason ) = @_;
            Mojo::IOLoop->remove($id) if $id;
            $c->app->log->debug("WebSocket closed with status $code");
        }
    );
} => 'ws';

get '/event' => sub {
    my $c    = shift;
    my $id;
    my $task = $c->create_task;

    $c->log->debug(" Received a subscriber ");

    $c->res->headers->content_type('text/event-stream');
    $c->write;
    $id = Mojo::IOLoop->recurring(
        TIME() + 1 => sub {
            if ( my $data = $task->() ) {
                $c->log->debug('sending tick');
                $c->write( "event:tick\ndata:" . encode_json($data) . "\n\n" );
            }
            else {
                Mojo::IOLoop->remove($id);
                undef $id;
            }
        }
    );

    $c->on( finish => sub { Mojo::IOLoop->remove($id) if $id } );

} => 'sse';

get '/' => sub {
    my $c = shift;
    $c->stash(
        settings => {
            wsUrl  => $c->url_for('ws')->to_abs,
            sseUrl => $c->url_for('sse')->to_abs,
        }
    );
    $c->render( template => 'app/root' );
};

app->start;

__DATA__

@@ app/root.html.ep
% use Mojo::JSON 'to_json';
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width,initial-scale=1'>

    <title>Svelte app</title>

    <link rel='icon' type='image/png' href='/favicon.png'>
    <link rel='stylesheet' href='/global.css'>
    %= asset "app.css"
    <script> window.__app = <%== to_json $settings %> </script>
</head>

<body>
    %= asset "app.js"
</body>
</html>
